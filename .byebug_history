continue
voter
continue
voter
continue
voter.user =! current_user
voter.user == current_user
current_user
voter.user
voter
continue
@movie
continue
@user.id
 @session.movies.where.not(id: @session.votes.where(user_id: @user.id).select(:movie_id)).sample
@session.movies
@session
@movie
continue
voter_path
continue
@movie
@session.movies
@session
continue
current_user.movies.first
current_user.movies
current_user
@movie
continue
params
continue
params
total_voters
 votes.where(positive: true)
         .group(:movie_id)
         .having('COUNT(DISTINCT voter_id) = ?', total_voters)
         .exists?
 votes.where(positive: true)
   23:          .group(:movie_id)
   24:          .having('COUNT(DISTINCT voter_id) = ?', total_voters)
   25:          .exists?
continue
voters
votes.last
session.vote.last
continue
votes.pluck(:positive)
votes.pluck(:voter_id)
votes.pluck(:voter_id).pluck(:positive)
votes
votes.where(positive: true).group(:movie_id).having('count(distinct voter_id) = ?', self.unique_participants).count.any?
session.votes.where(positive: true).group(:movie_id).having('count(distinct voter_id) = ?', self.unique_participants).count.any?
session.votes.where(positive: true).group(:movie_id).having('count(distinct voter_id) = ?', session.unique_participants).count.any?
self
session_id
session.votes.where(positive: true).group(:movie_id).having('count(distinct voter_id) = ?', session.unique_participants).count.any?
votes.where(positive: true).group(:movie_id).having('count(distinct voter_id) = ?', unique_participants).count.any?
votes.where(positive: true).group(:movie_id).having('count(distinct voter_id) = ?'
    votes.where(positive: true).group(:movie_id).having('count(distinct voter_id) = ?', unique_participants).count.any?
votes
votes.where(positive: true).group(:movie_id).having('count(distinct voter_id) = ?'
votes.where(positive: true).group(:movie_id).having('count(distinct voter_id)
unique_participants
continue
session.votes.where(movie: @movie).count
session.votes.where(movie: @movie)
session.votes.where(movie: @movie, positive: true)
session.votes.where(movie: movie, positive: true)
@movie
session.votes.where(movie: movie, positive: true)
continue
xml_doc.xpath('//Video').first
xml_doc.xpath('//Video')
xml_doc.first
xml_doc
movie = movies.first
continue
movies.first
continue
"http://#{server_info[:ip]}:#{server_info[:port]}#{video.attr('thumb')}?X-Plex-Token=#{user.plex_token}"
server_info
video.attr('ratingKey')
video = movies.first
movies.first
movies = xml_doc.xpath('//Video')
xml_doc.xpath('//Video')
continue
response.body
    response = connection.get("/library/sections/#{section_id}/all") do |req|
      req.headers['Accept'] = 'application/xml'
      req.headers['X-Plex-Token'] = user.plex_token
      req.headers['X-Plex-Client-Identifier'] = user.plex_client_id
    end
    response = connection.get("/api/v2/library/sections/#{section_id}/all") do |req|
      req.headers['Accept'] = 'application/xml'
      req.headers['X-Plex-Token'] = user.plex_token
      req.headers['X-Plex-Client-Identifier'] = user.plex_client_id
    end
response
response.body
reponse.body
    connection = Faraday.new(url: "http://#{server_info[:ip]}:#{server_info[:port]}") do |faraday|
      faraday.request :url_encoded
      faraday.adapter Faraday.default_adapter
    end
server_info
section_id
continue
section_id
response.body
response = connection.get("/api/v2/library/sections/#{section_id}/all") do |req|
      req.headers['Accept'] = 'application/xml'
      req.headers['X-Plex-Token'] = user.plex_token
      req.headers['X-Plex-Client-Identifier'] = user.plex_client_id
    end
connection = Faraday.new(url: 'https://plex.tv') do |faraday|
      faraday.request :url_encoded
      faraday.adapter Faraday.default_adapter
    end
sections
continue
Session.find_by(id: params[:id])
Session.find_by(session_token: params[:id])
params
continue
@session.save
continue
@session.errors
@session.save
continue
@session.errors
@session.save
@session
continue
conntinue
@session.errors
@session.save
continue
params
@session
continue
@session.errors
@session.save
@session
continue
sections
continue
servers.count
servers
 servers = JSON.parse(response.body)
response = connection.get('/api/v2/resources') do |req|
      req.headers['Accept'] = 'application/json'
      req.headers['X-Plex-Token'] = user.plex_token
      req.headers['X-Plex-Client-Identifier'] = user.plex_client_id
    end
continue
response.body
response = connection.get('/api/v2/resources') do |req|
      req.headers['Accept'] = 'application/json'
      req.headers['X-Plex-Token'] = user.plex_token
      req.headers['X-Plex-Client-Identifier'] = user.plex_client_id
    end
response = connection.get('/api/v2/resources') do |req|
   48:       req.headers['Accept'] = 'application/json'
   49:       req.headers['X-Plex-Token'] = user.plex_token
   50:       req.headers['X-Plex-Client-Identifier'] = user.plex_client_id
   51:     end
continue
response.body
  response = connection.get('/api/v2/resources') do |req|
    req.headers['Accept'] = 'application/json'
    req.headers['X-Plex-Token'] = user.plex_token
    req.headers['X-Plex-Client-Identifier'] = user.plex_client_id
  end
user
response.body
 response = connection.get('/api/v2/resources') do |req|
    req.headers['Accept'] = 'application/json'  # Request JSON to make parsing easier
    req.headers['X-Plex-Token'] = user.plex_token
  end
continue
response.body
 response = connection.get('/api/v2/resources') do |req|
    req.headers['Accept'] = 'application/json'  # Request JSON to make parsing easier
    req.headers['X-Plex-Token'] = user.plex_token
  end
 response = connection.get("/library/sections") do |req|
      req.headers['Accept'] = 'application/xml'
      req.headers['X-Plex-Token'] = user.plex_token
    end
 response = connection.get("/api/v2/library/sections") do |req|
      req.headers['Accept'] = 'application/xml'
      req.headers['X-Plex-Token'] = user.plex_token
    end
response = connection.get("/api/v2/library/sections") do |req|
   49:       req.headers['Accept'] = 'application/xml'
   50:       req.headers['X-Plex-Token'] = user.plex_token
   51:     end
connection
continue
response.body
response = connection.get("/library/sections") do |req|
      req.headers['Accept'] = 'application/xml'
      req.headers['X-Plex-Token'] = user.plex_token
    end
response.body
